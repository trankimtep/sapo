1. API là gì?
	Application programming interface là một phần của code giúp cho các thiết bị số, các ứng dụng phần mềm, các server
	có thể giao tiếp được với nhau và nó là nền tảng của nhiều dịch vụ mà chúng ta đang sử dụng. API làm nhiệm vụ trả về data
	hình ảnh, video, ... dưới dạng dữ liệu mà máy tính có thể đọc và thiết bị cuối sẽ chuyển đổi các dạng dữ liệu đó thành 
	dạng thân thiện hơn với người dùng.

2. REST API
	Representation state transfer là một kiểu kiến trúc phần mềm mà trong đó xác định những quy định mà các hệ thống khác 
	nhau giao tiếp với nhau. Một API mà tuân theo quy tắc REST được gọi là REST API.
	Sáu nguyên tắc của REST:
	 -  Kiến trúc Client-Server: Trong kiểu kiến trúc REST, hoạt động của client và server là hoàn toàn độc lập với nhau,
	    nghĩa là code trên client có thể thay đổi bất kì lúc nào mà không ảnh hưởng gì đến server và ngược lại, code trên
	    server cũng có thể thay đổi bất kì lúc nào mà không ảnh hưởng đến server. Khi nào client và server còn thống nhất
	    được định dạng tin nhắn mà chúng gửi cho nhau thì chúng vẫn còn giữ được tính modul và vẫn còn tách biệt nhau.
	    Việc tách biệt giao diện người dùng và thành phần lưu trữ dữ liệu cho phép ta cải thiện tính mềm dẻo và khả năng
	    trống lại các mối đe dọa bằng cách đơn giản hóa các thành phần của server.

	 -  Uniform interface: bên client dù là browser, mobile app hay bất kì cái gì thì nó cũng có thể truy cập và 
	    sử dụng REST API bằng cách giống nhau. 

	 -  Statelessness: Server không ghi nhớ trạng thái của client. Tất cả các request của client đều không được ghi nhớ nên
	    chúng đều phải bao gồm đầy đủ các thông tin cần thiết (Ví dụ như thông tin xác thực của client)

	 -  Cacheability: Rest servers có thể cache dữ liệu để dùng lại để sử dụng cho những request trong tương lai.

	 -  Layered system: REST APIs có thể có nhiều lớp trung gian giữa client và server. Tuy nhiên là client không cần 
	    phải biết về chúng

3. Giao tiếp giữa Client và Server
    Trong kiến trúc REST, client gửi request để nhận hoặc sửa đổi tài nguyên, và server sẽ gửi response cho các request đó.Dưới đây là
    tiến trình giao tiếp.
    a. Tạo Requests
	REST yêu cầu client phải tạo request gửi đến server để nhận hoặc sửa đổi dữ liệu. Request này bao gồm:

	- Một phương thức HTTP để xác định loại hành động của request.	
	  HTTP có 4 phương thức cơ bản:
	    + GET: Nhận về một tài nguyên cụ thể hoặc một danh sách tài nguyên.
	    + POST: Tạo một tài nguyên
	    + PUT: Update một tài nguyên
	    + DELETE: xóa một tài nguyên

	- Một header
	    Trong header của request, client gửi một loại thông tin mà server có thể nhận được gọi là Accept field và nó đảm
	    bảo rằng server sẽ không gửi một loại dữ liệu nào đấy mà client không thể hiểu hoặc không thể xử lý được. MỘt trong
	    những kiểu dữ liệu đó là kiểu MIME (Multipurpose Internet Mail Extensions)
	    MIME dùng để xác định kiểu thông tin trong Accept field, nó bao gồm "type" và "subtype", chúng được tách biệt bởi
	    dấu gạch (/)
	    Ví dụ: Một text file có chứa HTML sẽ được xác định là kiểu text/html. Hoặc nếu nó dùng CSS thì kiểu sẽ là text/css.
            Về mặc định, các file text sẽ được xác định là kiểu text/plain. Tuy nhiên kiểu này không phải là dùng được cho
	    mọi trường hợp. Nếu client mong đợi kiểu text/css mà server gửi kiểu text/plain thì client sẽ không thể nhận
	    ra nội dung được.
			    
	- Một đường dẫn (path) tới tài nguyên
	    Request phải chứa một được dẫn đến tài nguyên mà nó cần xử lý. Trong RESTful APIs, path thường dùng để cho client biết 
	    hoạt động gì đang diễn ra.
	    Thông thường, phần đầu tiên của path sẽ là dạng số nhiều của tài nguyên. Điều này làm cho việc lồng các path vào nhau trở 
	    nên dễ hiểu hơn
	    Path nên chứa thông tin cần thiết để định vị một tài nguyên một cách chi tiết nhất có thể. Khi định nghĩa một list hay một
	    collection tài nguyên, ta không nhất thiết phải thêm một id mà server sẽ tự tạo id cho một object mới.
	    
	- Một body chứa data. (optional)

    b. Gửi Response
	Khi mà server gửi data tới client, nó phải bao gồm một content-type trong header của response. Cái content-type này sẽ cho 
	client biết trong response body là loại data gì. Những kiểu thông tin này chính là MIME types bới vì chúng xuất hiện trong 
	accept field của request header. Content type mà server gửi phải là một trong số những cái được định nghĩa trong accept field
	của request.
	Respone codes:

	Status code 		Meaning
	200 (OK) 		This is the standard response for 
				successful HTTP requests.

	201 (CREATED) 		This is the standard response for 
				an HTTP request that resulted in an item 
				being successfully created.

	204 (NO CONTENT) 	This is the standard response for 
				successful HTTP requests, where nothing is 
				being returned in the response body.

	400 (BAD REQUEST) 	The request cannot be processed 
				because of bad request syntax, excessive size, 
				or another client error.

	403 (FORBIDDEN) 	The client does not have permission to access 
				this resource.

	404 (NOT FOUND) 	The resource could not be found at this time. 
				It is possible it was deleted, or does not exist yet.

	500 (INTERNAL           The generic answer for an unexpected failure 
	SERVER ERROR) 		if there is no more specific information available.
	 
4. Tại sao phải dùng REST API?
	a. Làm đơn giản hóa việc lập trình
	   Nếu không có API, thì khi muốn giao tiếp với một phần mềm hay service của một bên thứ 3, ltv lại phải viết ra một 
	   giao thức mới.
           Việc tạo một ngôn ngữ chung cho tất cả các hệ thống là cần thiết để giải quyết vấn đề này.
	b. Cú pháp đơn giản
	   Việc giao tiếp giữa các hệ thống khác nhau, dù có tuân theo một quy tắc cụ thể thì cũng không dễ dàng vì các vấn
	   đề bậc thấp như định dạng dữ liệu, vận chuyển dữ liệu,..
	   APIs giải quyết vấn đề này bằng cách cung cấp các cú pháp bậc cao, thuận tiện cho việc tra cứu và sử dụng.
 	   
			

